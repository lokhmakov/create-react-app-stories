import React, { Component } from 'react'

import { Helmet }           from 'react-helmet'

import { Dimmer }           from 'semantic-ui-react'
import { Header }           from 'semantic-ui-react'
import { Icon }             from 'semantic-ui-react'
import { Grid }             from 'semantic-ui-react'
import { Segment }          from 'semantic-ui-react'

import storage              from 'store'


import go                   from 'app/stories/history/go'

import StoryForm            from 'app/stories/modules/story/components/StoryForm'
import storyErrors          from 'app/stories/modules/story/errors'

import s                    from './Create.css'

import createDebugger       from 'engine/debug'
const debug = createDebugger(`Create`)

class Create extends Component {
  constructor(props) {
    super(props)

    this.state = {
      active: false,
      errors: [],
    }
  }

  onSubmit = (values) => {
    debug(`onSubmit()`, values)
    const { sessionCurrentUser } = this.props
    const { storyName, quantity } = values
    const storyLineList = [...Array(quantity).keys()].map(i => ({ value: values[`storyLine${ i + 1 }`] }))

    if (!sessionCurrentUser) return this.setState({ errors: [storyErrors.ACCESS_DENIED] })

    this.setState({ active: true, errors: [] })
    this.props.storyCreateWithLines({ name: storyName, storyLineList }).then(({ data }) => {
      const { storyCreateWithLines = {} } = data
      const { result, errors = [] } = storyCreateWithLines
      const { id } = result
      if (errors.length) return this.setState({ active: false, errors })
      try { storage.remove(`StoryForm`) } catch (err) { }
      setTimeout(() => {
        go(`/view/${ id }`)
      }, 4000)
    })
  }

  render() {
    const { title } = this.props
    const { active, errors } = this.state

    return (
      <div className={ s.root }>
        <Helmet>
          <title>{ title }</title>
        </Helmet>

        <Dimmer.Dimmable
          as={ Segment }
          className={ s.sectionContent }
          dimmed={ active }
          vertical

          style={{ border: 0, boxShadow: `none` }}
        >
          <Dimmer active={ active } style={{ backgroundColor: `rgba(0, 0, 0, 0.9)` }}>
            <Header
              as='h2'
              icon
              inverted
              style={{ textTransform: `uppercase` }}
            >
              <Icon name='heart' color='red'/>
              YOUR STORY SHARED
            </Header>
          </Dimmer>

          <Grid
            container
            stackable
          >
            <Grid.Row>
              <Grid.Column widescreen={ 16 }>
                <StoryForm onSubmit={ this.onSubmit } errors={ errors } />
              </Grid.Column>
            </Grid.Row>
          </Grid>
        </Dimmer.Dimmable>
      </div>
    )
  }
}

import { compose }          from 'redux'

import withSessionCurrentUser from 'app/stories/modules/session/graphql/currentUser'

import withStoryCreateWithLines from 'app/stories/modules/story/graphql/createWithLines'

import withStyles           from 'isomorphic-style-loader/lib/withStyles'

export default compose(
  withSessionCurrentUser(),

  withStoryCreateWithLines(),

  withStyles(s)
)(Create)
