import { upperFirst }       from 'lodash'

import generateCustomResolverQueryMap from 'engine/graphql/generate/customResolverQueryMap'
import generateCustomResolverMutationMap from 'engine/graphql/generate/customResolverMutationMap'

import typeMap              from 'engine/graphql/typeMap'

import generateFindAll      from './findAll'
import generateCreate       from './create'
import generateUpdate       from './update'
import generateDelete       from './delete'

export default function generateResolverMap(payload) {
  const { mutationMap, name, fieldList, model, pubsub, customResolverMap = {}, queryMap } = payload
  const typeName = upperFirst(name)

  const resolverMap = {
    [typeName]: {},
    Query: {
      [`${ name }FindAll`]: generateFindAll({ customResolverMap, name, model }),

      ...generateCustomResolverQueryMap({ queryMap, name, customResolverMap }),
    },
    Mutation: {
      [`${ name }Create`]: generateCreate({ customResolverMap, name, model, pubsub }),
      [`${ name }Update`]: generateUpdate({ customResolverMap, name, model, pubsub }),
      [`${ name }Delete`]: generateDelete({ customResolverMap, name, model, pubsub }),

      ...generateCustomResolverMutationMap({ mutationMap, name, customResolverMap, pubsub }),
    },
    Subscription: {
      [`${ name }Created`]: (doc) => {
        return doc
      },
      [`${ name }Updated`]: (doc) => {
        return doc
      },
      [`${ name }Deleted`]: (doc) => {
        return doc
      },
    },
  }

  fieldList.map(({ name, type }) => {
    if (!typeMap[type]) {
      const referenceName = upperFirst(name)
      resolverMap[typeName][referenceName] = (parent, payload, ctx) => {
        return parent[`get${ referenceName }`]()
      }
    }
  })

  return resolverMap
}
