import bodyParser           from 'body-parser'
import cookieParser         from 'cookie-parser'

import cors                 from 'cors'

import express              from 'express'
import { createServer }     from 'http'

import fs                   from 'fs'

import Router               from 'universal-router'

import createDebugger       from '../debug'
const debug = createDebugger(`server`)

import App                  from 'engine/components/App'
import Html                 from 'engine/components/Html'

import routes               from 'pages/routes'

import React                from 'react'
import { getDataFromTree }  from 'react-apollo'
import ReactDOM             from 'react-dom/server'

const PORT = 5000

const whitelist = [
  'http://localhost:3000',
]

const corsOptions = {
  origin(origin, callback){
    const originIsWhitelisted = whitelist.indexOf(origin) !== -1;
    callback(null, originIsWhitelisted);
  },
  credentials: true
}

export default ({ middlewareList }) => new Promise((resolve) => {
  const app = express()
  const server = createServer(app)

  const router = new Router(routes)

  const jsFiles = fs.readdirSync('./build/static/js')

  app.use(express.static('./build'))

  app.use(cors(corsOptions))

  app.use(cookieParser())
  app.use(bodyParser.urlencoded({ extended: true }))
  app.use(bodyParser.json())

  middlewareList.map(middleware => middleware({ app }))

  app.get('*', async (req, res, next) => {
    try {
      const css = new Set()
      const clients = {}
      const stores = {}

      const context = {
        insertCss: (...styles) => {
          styles.forEach(style => css.add(style._getCss()))
        },

        getClient: (name) => clients[name],
        setClient: (name, client) => clients[name] = client,
        getStore: (name) => stores[name],
        setStore: (name, store) => stores[name] = store,

        req,
        res,
      }

      const route = await router.resolve({
        path: req.path,
        query: req.query,
        context,
      })

      debug(`req.path`, req.path)

      if (route.redirect) {
        res.redirect(route.status || 302, route.redirect)
        return
      }

      const app = <App context={ context }>{ route.component }</App>

      debug(`getDataFromTree(app)`)
      await getDataFromTree(app)

      const data = { ...route }
      data.children = ReactDOM.renderToString(app)
      data.styles = [
        { id: 'css', cssText: [...css].join('') },
      ]
      data.scripts = [
        `/static/js/${ jsFiles[0] }`
      ]

      function getAllStates(clients) {
        const result = {}
        Object.keys(clients).map(name => {
          const client = clients[name]

          result[name] = {
            apollo: {
              data: client.store.getState().apollo.data
            }
          }
        })
        return result
      }

      data.subsystems = getAllStates(clients)

      debug(`renderToStaticMarkup()`)
      const html = ReactDOM.renderToStaticMarkup(<Html {...data} />)

      debug(`res.send()`)
      res.status(route.status || 200)
      res.send(`<!doctype html>${html}`)
    } catch (err) {
      next(err)
    }
  })

  app.use((err, req, res, next) => {
    console.log(err)
    res.status(err.status || 500)
    res.send(`Internal server error`)
  })

  server.listen(PORT, () => {
    console.log(`==> ðŸŒŽ  http://0.0.0.0:${ PORT }/`)
    resolve()
  })
})
