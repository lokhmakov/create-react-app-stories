import { graphqlExpress }   from 'graphql-server-express'
import { graphiqlExpress }  from 'graphql-server-express'
import { formatError }      from 'graphql'

var GraphiQL = require("graphql-server-module-graphiql")
var url = require("url")

import debug                from './debug'

const schemaMap = {}

export function enable(payload) {
  const { name, schema } = payload
  debug(`enable()`, name)
  schemaMap[name] = schema
}

export function disable(payload) {
  const { name } = payload
  delete schemaMap[name]
}

function serverMiddlewareGraphQL({ schema }) {
  async function processGraphQL(req, res) {
    try {
      debug(`processGraphQL()`, req.path)

      const schemaName = req.path.slice(1)

      const query = req.query.query || req.body.query
      if (query && query.length > 2000) {
        throw new Error('Query too large')
      }

      debug(`processGraphQL()`, `schemaName`, schemaName)
      debug(`processGraphQL()`, `Object.keys(schemaMap)`, Object.keys(schemaMap))

      return {
        schema: schemaMap[schemaName] || schema,
        context: {
          req,
          res,
        }
      }
    } catch (err) {
      res.status(500)
      const result = { errors: [err] }
      result.errors = result.errors.map(formatError)
      res
        .set('Content-Type', 'application/json')
        .send(JSON.stringify(result))
    }
  }

  async function processGraphiQL(req, res) {
    debug(`processGraphiQL()`, req.path)

    const endpointURL = `/graphql${ req.path }`

    var q = req.url && url.parse(req.url, true).query || {};
    var query = q.query || '';
    var operationName = q.operationName || '';
    var graphiQLString = GraphiQL.renderGraphiQL({
      endpointURL,
      query: query,
      variables: q.variables && JSON.parse(q.variables),
      operationName: operationName,
    });
    res.setHeader('Content-Type', 'text/html');
    res.write(graphiQLString);
    res.end();
  }

  return ({ app }) => {
    app.use('/graphql', graphqlExpress(processGraphQL))

    // if (process.env.NODE_ENV !== 'production') {
      app.use('/graphiql', processGraphiQL)
    // }
  }
}

export default serverMiddlewareGraphQL
