import { enable }           from 'engine/server/graphql'

import * as captcha         from './modules/captcha'
import * as i18n            from './modules/i18n'
import * as session         from './modules/session'
import * as story           from './modules/story'
import * as storyLine       from './modules/storyLine'
import * as user            from './modules/user'

import en                   from './modules/i18n/dictionary/en'
import ru                   from './modules/i18n/dictionary/ru'
import createUser           from './modules/user/api/createUser'

import config               from './config'
import sync                 from './sequelize/sync'
import getSchema            from './graphql/getSchema'
import subscriptionServerStart from './apollo/subscriptionServer'

const createUsers = async () => {
  console.log(`createUsers()`)
  try {
    await createUser({ username: `root@root.com`, password: `toor` })
  } catch (err) {
    console.log(err.message)
  }
}

const createI18nRecord = async (doc) => {
  console.log(`createI18nRecord()`, `doc`, doc)
  try {
    const { name, lang, value } = doc
    const [,created] = await i18n.model.findOrCreate({ where: { name, lang }, defaults: { value }})
    return created
  } catch (err) {
    console.log(err.message)
    throw err
  }
}

const createI18n = async (lang, dictionary) => {
  const list = Object.keys(dictionary)
  let index = list.length
  while (index--) {
    const name = list[index]
    const value = dictionary[name]
    try {
      const result = await createI18nRecord({ name, lang, value })
      if (!result) index = 0
    } catch (err) {
      console.log(err.message)
      index = 0
    }
  }
}

export default async () => {
  const { name } = config
  const schema = getSchema()

  await sync()

  await createUsers()

  await createI18n(`ru`, ru)
  await createI18n(`en`, en)

  enable({ name, schema })

  subscriptionServerStart()
}
