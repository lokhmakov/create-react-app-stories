import subsystemConfig      from '../../../../config'

import config               from '../../config'
import errors               from '../../errors'
import debug                from '../../debug'
import model                from '../../model'

const { tokenName } = config
const { name } = subsystemConfig

export default () => {
  async function processSession(req, res, next) {
    debug(`sessionMiddleware`, `processSession()`)
    try {
      const sessionId = req.cookies[tokenName]

      if (!req.context) req.context = {}
      if (!req.context[name]) req.context[name] = {}

      if (sessionId) {
        const session = await model.findOne({ where: { id: sessionId }})
        if (session) {
          req.context[name].user = await session.getUser()
          debug(`sessionMiddleware`, `processSession()`, `Add user to context`, session.get(`userId`))
        } else {
          debug(`sessionMiddleware`, `processSession()`, `Remove session from cookies`)
          res.cookie(tokenName, '', { expires: new Date() })
        }
      }
      next()
    } catch (err) {
      debug(`sessionMiddleware`, `processSession()`, `ERROR`, errors.REMOVE_SESSION_ID_ON_ERROR)
      res.cookie(tokenName, '', { expires: new Date() })
      console.warn(err)
      next()
    }
  }

  return ({ app }) => {
    app.use(processSession)
  }
}
