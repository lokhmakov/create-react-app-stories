import React, { Component } from 'react'

import { Button }           from 'semantic-ui-react'
import { Divider }          from 'semantic-ui-react'
import { Form }             from 'semantic-ui-react'
import { Grid }             from 'semantic-ui-react'
import { Header }           from 'semantic-ui-react'
import { Message }          from 'semantic-ui-react'
import { Segment }          from 'semantic-ui-react'

import storage              from 'store'


import go                   from '../../../../history/go'
import Captcha              from '../../../captcha/components/Captcha'

import s                    from './LoginForm.css'

// import createDebugger       from 'engine/debug'
// const debug = createDebugger(require(`./package.json`).name)

class LoginForm extends Component {
  static contextTypes = {
    // translate: PropTypes.func.isRequired,
  }

  constructor(props) {
    super(props)

    this.state = {
      values: {},
      showCaptcha: false,
    }
  }

  componentDidMount() {
    const username = storage.get(`LoginForm.username`)
    this.setState({ values: { ...this.state.values, username }})
  }

  handleChange = ({ target: { name, value }}) => this.setState({ values: {...this.state.values, [name]: value }})

  componentWillUpdate(nextProps, nextState) {
    const { values } = nextState
    const { username = `` } = values
    if (username !== this.state.username) storage.set(`LoginForm.username`, username)
  }

  onCaptchaChange = (payload) => {
    const { text, value } = payload
    this.setState({ captchaText: text, captchaValue: value })
  }

  onSubmit = (e) => {
    e.preventDefault()
    e.stopPropagation()
    const { values } = this.state
    this.props.onSubmit(values)
  }

  onSignup = (e) => {
    const { captchaText, captchaValue, showCaptcha, values } = this.state
    if (!showCaptcha) return this.setState({ showCaptcha: true })
    this.props.onSignup && this.props.onSignup({ ...values, captchaText, captchaValue })
  }

  renderCaptcha() {
    const { showCaptcha } = this.state
    if (!showCaptcha) return null
    return (
      <div className={ s.captcha }>
        <Captcha onChange={ this.onCaptchaChange }/>
      </div>
    )
  }

  renderErrors() {
    const { errors = [] } = this.props
    if (!errors || !errors.length) return

    let index = 0

    return errors.map(doc => (
      <Message
        key={ index++ }
        error
        header={ `${ doc.message} (${ doc.code })` }
      />
    ))
  }

  render() {
    const { username } = this.state.values
    // const { translate } = this.context

    return (
      <Grid
        centered
        className={ s.grid }
        verticalAlign='middle'
      >
        <Grid.Column className={ s.column }>
          <Header
            as='h2'
            color='teal'
          >
            Log-in to your account
          </Header>
          <Form size='large' onSubmit={ this.onSubmit } error>
            <Segment stacked>
              <Form.Input
                icon='user'
                iconPosition='left'
                name='username'
                placeholder='E-mail address'
                type='email'
                value={ username || `` }

                onChange={ this.handleChange }
              />
              <Form.Input
                icon='lock'
                iconPosition='left'
                name='password'
                placeholder='Password'
                type='password'

                onChange={ this.handleChange }
              />
              <Button
                color='teal'
                content='Login'
                fluid
                size='large'
              />
              <Divider horizontal>Or</Divider>
              { this.renderCaptcha() }
              <Button
                color='black'
                content='Sign Up Now'
                fluid
                size='large'
                type='button'

                onClick={ this.onSignup }
              />
              <Divider horizontal>Go</Divider>
              <Button
                color='teal'
                content='Back'
                fluid
                size='large'
                type='button'

                onClick={ () => go(`/`) }
              />
            </Segment>
          </Form>
        </Grid.Column>
      </Grid>
    )
  }
}

import withStyles           from 'isomorphic-style-loader/lib/withStyles'
import { compose }          from 'redux'

export default compose(
  withStyles(s),
)(LoginForm)
