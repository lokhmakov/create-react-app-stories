import PropTypes            from 'prop-types'
import React, { Component } from 'react'

import { Button }           from 'semantic-ui-react'
import { Divider }          from 'semantic-ui-react'
import { Form }             from 'semantic-ui-react'
import { Message }          from 'semantic-ui-react'


import storage              from 'store'


import s                    from './StoryForm.css'

import createDebugger       from 'engine/debug'
const debug = createDebugger(require(`./package.json`).name)

const TAB_KEY = 9

class StoryForm extends Component {
  static contextTypes = {
    translate: PropTypes.func.isRequired,
  }

  persistMap = {
    storyName: ``,
    quantity: 1,
  }

  constructor(props) {
    super(props)

    this.state = {
      formName: `StoryForm`,
      values: {},
      over: null,
    }
  }

  componentDidMount() {
    this.stateImport()
  }

  componentWillUpdate(nextProps, nextState) {
    this.stateExport(nextState)
  }

  generateHandleTab = index => ({ keyCode, shiftKey }) => {
    const { quantity } = this.state.values
    if (!shiftKey && keyCode === TAB_KEY && index === quantity) {
      this.setValues({ quantity: quantity + 1 })
    }
  }

  handleChange = ({ target: { name, value }}) => this.setValues({ [name]: value })

  onSubmit = (e) => {
    e.preventDefault()
    e.stopPropagation()
    const { values } = this.state
    this.props.onSubmit && this.props.onSubmit(values)
  }

  setValues = (values) => this.setState({ values: { ...this.state.values, ...values }})

  stateExport = (nextState) => {
    const { formName, values } = nextState
    // debug(`stateExport()`, `storage.set(${ formName }, JSON.stringify(values))`, values)
    storage.set(formName, JSON.stringify(values))
  }

  stateImport = () => {
    const { formName } = this.state
    let result = {}
    try {
      result = JSON.parse(storage.get(formName))
    } catch (err) {
      debug(`stateImport()`, `cannot restore ${ formName }`)
    }

    for (let name of Object.keys(this.persistMap)) {
      const defaultValue = this.persistMap[name]
      if (!result.hasOwnProperty(name)) result[name] = defaultValue
    }

    // debug(`stateImport()`, `this.setValue(result)`, result)
    this.setValues(result)
  }

  rowRemove = index => {
    console.log(index)
  }

  renderLines() {
    const { over } = this.state
    const { quantity = 1 } = this.state.values
    return [...Array(quantity - 1).keys()].map(i => {
      const offset = 2
      const index = i + offset
      const name = `storyLine${ index }`
      const { [name]: value } = this.state.values

      const icon = over === index ? {
          color: `red`,
          link: true,
          name: `minus`,
          size: `large`,
          onClick: () => this.rowRemove(index)
        } : null

      return (
        <Form.Input
          key={ name }
          name={ name }
          icon={ icon }
          placeholder={ `STORY LINE #${ index } ` }
          transparent
          value={ value || `` }

          onChange={ this.handleChange }
          onKeyDown={ this.generateHandleTab(index) }
//          onMouseOver={ () => this.setState({ over: index }) }
        />
      )
    })
  }

  renderErrors() {
    const { errors = [] } = this.props
    const { translate } = this.context

    let index = 0
    return errors.map(({ message }) => (
      <Message
        error
        key={ index++ }
      >
        { translate(message) }
      </Message>
    ))
  }

  render() {
    const { storyName, storyLine1, quantity } = this.state.values
    // const { translate } = this.context

    return (
      <Form size='huge' onSubmit={ this.onSubmit } error>
        <Form.Input
          name='storyName'
          placeholder='STORY NAME'
          transparent
          size='huge'
          value={ storyName || `` }

          onChange={ this.handleChange }
        />
        <Form.Input
          name='storyLine1'
          placeholder='STORY LINE #1'
          transparent
          value={ storyLine1 || `` }

          onChange={ this.handleChange }
          onKeyDown={ this.generateHandleTab(1) }
        />
        { this.renderLines() }
        { this.renderErrors() }
        <Button
          color='teal'
          content='ADD LINE'
          fluid
          size='large'
          type='button'

          onClick={ () => this.setValues({ quantity: (Number(quantity) || 0) + 1 }) }
        />
        <Button
          color='red'
          content='REMOVE LAST LINE'
          className={ s.buttonRemove }
          fluid
          size='large'
          type='button'

          onClick={ () => quantity >= 0 && this.setValues({ quantity: (Number(quantity) || 0) - 1 }) }
        />
        <Divider horizontal>And</Divider>
        <Button
          color='teal'
          content='SHARE'
          fluid
          size='large'
        />
      </Form>
    )
  }
}

import withStyles           from 'isomorphic-style-loader/lib/withStyles'
import { compose }          from 'redux'

export default compose(
  withStyles(s),
)(StoryForm)
