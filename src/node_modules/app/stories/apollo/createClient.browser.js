import { createNetworkInterface } from 'apollo-client'
import { SubscriptionClient } from 'subscriptions-transport-ws'
import { addGraphQLSubscriptions } from 'subscriptions-transport-ws'

import createApolloClient   from 'engine/apollo/createApolloClient'

import config               from '../config'

const wsClient = new SubscriptionClient(`ws://${ location.hostname }:${ config.subscriptionPort }`)

let client

const networkInterface = createNetworkInterface({
  uri: `//${ location.hostname }:5000/graphql/${ config.name }`,
  opts: {
    // credentials: 'same-origin',
    credentials: 'include',
  },
  transportBatching: true,
})

const networkInterfaceWithSubscriptions = addGraphQLSubscriptions(
  networkInterface,
  wsClient
)

export default function createClient(payload) {
  if (client) return client
  return client = createApolloClient({
    dataIdFromObject: result => {
      return result.id || null
    },
    networkInterface: networkInterfaceWithSubscriptions,
    ssrForceFetchDelay: 100,
  })
}
